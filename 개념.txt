렌더링 : 서버로부터 받은 내용을 브라우저 화면에 표시하는 것
서버 사이드 렌더링 (SSR) : 페이지를 이동할 때마다 새로운 페이지를 요청
    장점 : 검색엔진 최적화 (SEO), 오픈태그, 빠른 페이지 렌더링
    단점 : 복잡함, 불필요한 인터넷 대역폭 발생, 서버 렌더링에 따른 부하
    사례 : Next.js
클라이언트 사이드 렌더링 (CSR) : 클라이언트에서 렌더링하는 방식
    장점 : 처음에 한 페이지만 불러옴 - 이후 필요한 부분만 불러오기 때문에 빠름
    단점 : 초기 구동 속도가 느림, 검색엔진 최적화 어려움
    사례 : React, Angular, Vue
서버리스 : 클라우드 컴퓨팅의 일종. 개발자가 서버 직접 관리할 필요 없음
    동적으로 서버 자원을 할당하기 때문에 경제적
    사용자가 0명일 때와 1000명일 때 서버를 다르게 운용할 수 있음
캐싱 : 파일 복사본을 캐시 또는 임시 위치에 저장하여 빠르게 액세스할 수 있도록 하는 프로세스
Docker : Dockerfile을 읽어서 이미지를 자동으로 빌드 할 수 있습니다.
Dockerfile : 사용자가 이미지를 생성하기 위해 명령 줄에서 호출할 수 있는 모든 명령이 포함된 텍스트 문서입니다. 
코드 리팩토링 : 결과의 변경 없이 코드의 구조를 재조정하는 것 - 가독성 높이고 유지보수를 편하게 함
Side Effect : 부작용
SRE : 사이드 신뢰성 엔지니어
Emotion : JS로 css 스타일을 작성하도록 설계된 라이브러리
    프레임워크에 구애받지 않고 사용 가능, React와 함께 사용도 가능
useRef : 저장공간 또는 DOM요소에 접근하기 위해 사용되는 React Hook
    useState와 다른 점은 값이 바뀌어도 렌더링되지 않는다는 것 - 이 특징이 필요한 상황이 존재
useMemo : 컴포넌트의 성능을 최적화 하는데 사용되는 훅
    동일한 계산 반복해야 할 때 이전 계산 값을 메모리에 저장함
    첫 번째 인자로 콜백 함수, 두 번째 인자로 변수 넣어 변수 값이 바뀔 때만 함수 실행 

State(상태) : 컴포넌트 내부에서 변할 수 있는 값 ex - 로그인 여부
Redux : 자바스크립트 상태 관리 라이브러리
상태 관리 도구가 필요한 이유 : 자식 컴포넌트가 많아지면 상태 관리가 복잡해지기 때문 (Props Drilling issue)
미들웨어 : 양쪽을 연결하여 데이터를 주고 받을 수 있도록 중간에서 매개 역할을 하는 소프트웨어
    여기서 양쪽이란 클라이언트(사용자)-서버, 서버-서버 등이 될 수 있다.
Thunk : 객체 대신 함수를 생성하는 액션 생성함수를 작성할 수 있게 해줌
    만약 특정 액션이 몇 초 뒤에 실행되게 하거나, 현재 상태에 따라 아예 액션이 무시되게 하려면
    -> 일반 액션 생성자로는 불가능 -> redux-thunk 사용
Regression test : 회귀, 어디서 버그 났는지 확인하기 위해 이전 버전 확인하는 것
atomic design pattern : 5단계로 나누어서 구조화 - 단계 개수는 원하는대로
HOC, Higher Order Component, 고차 컴포넌트 : 컴포넌트를 가져와 새 컴포넌트 반환하는 함수

CodePush : 사용자의 장치에 직접 배포하는데 대응할 수 있도록 해주는 Microsoft에서 만든 App Center 클라우드 서비스
    JS, HTML, CSS 및 이미지 변경등의 특정 업데이트를 게시할 수 있는 중앙 저장소 역할을 하며, 
    앱은 제공된 SDK를 사용하여 즉각 최신 업데이트를 불러올 수 있음
SDK : Software Development Kit, 프로그래머들을 위해서 제공하는 개발 도구, IDE 포함
IDE : Integrated Development Environment, 통합 개발 환경
    - 개발에 관련된 모든 작업을 하나의 프로그램 안에서 모두 처리하는 환경을 제공하는 툴
    ex : vscode, pycharm
클래스 1이 클래스 2를 이용할 때 1이 2에 의존한다고 함
    1은 2 없이 작동하지 않음 - 1은 디펜던트, 2는 디펜던시 라고 함
    이 두 클래스는 coupled 되어 있다고 함
hot-reloading : 앱을 처음부터 다시 시작하지 않고 새로운 코드 변경에 따른 
    코드 변경사항만 표시하며 변경된 코드에만 적용
사일로 효과 : 부서 이기주의 현상

선언적 프로그래밍 : 핵심 데이터만 전달받고 세부 구현은 뭉쳐 숨겨두는 스타일
    무엇을 하는 함수인지 빠르게 이해 가능
    세부 구현은 뭉쳐두어서 신경쓰지 않아도 됨
    쉽게 재사용 가능
명령형 프로그래밍 : 하나하나 세부 구현 작성
    세부 구현이 노출되어 있어서 커스텀하기는 쉽지만 읽는 데 오래 걸리고 재사용 어려움

Web Component 만드는 법
JS 기본 함수 customElements.define('만들태그이름', 축약할 html들 클래스형식으로)
    - 원하는 내용이 태그 안에 들어가게 됨
class 클래스이름 extends 어쩌구 {코드내용}
스타일도 넣을 수 있음. prop도 가능
